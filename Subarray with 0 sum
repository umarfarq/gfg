Given an array of integers. Find if there is a subarray (of size at-least one) with 0 sum. You just need to return true/false depending upon whether there is a subarray present with 0-sum or not. Printing will be taken care by the driver code.

Example 1:
Input:
n = 5
arr = {4,2,-3,1,6}
Output: 
Yes
Explanation: 
2, -3, 1 is the subarray with sum 0.

Solution in C++:-
#include <bits/stdc++.h>
using namespace std;
class Solution{
    public:
    bool subArrayExists(int arr[], int n)
    {
        //Your code here
          unordered_set<int>s{0};
        int sum=0;
        for(int i=0;i<n;i++)
        {
             sum+=arr[i];
             if(s.find(sum)==s.end()) s.insert(sum);
             else return 1;
        }
        return 0;
    }
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    int arr[n];
	    for(int i=0;i<n;i++)
	    cin>>arr[i];
	    Solution obj;
	    	if (obj.subArrayExists(arr, n))
		cout << "Yes\n";
	else
		cout << "No\n";
	}
	return 0;
}
