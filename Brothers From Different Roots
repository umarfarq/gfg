Given two BSTs containing N1 and N2 distinct nodes respectively and given a value x, your task is to complete the function countPairs(), that returns the count of all pairs of (a, b), where a belongs to one BST and b belongs to another BST, such that a + b = x.

Example 1:
Input:
BST1:
       5
     /   \
    3     7
   / \   / \
  2   4 6   8
BST2:
       10
     /    \
    6      15
   / \    /  \
  3   8  11   18
x = 16

Output:
3
Explanation:
The pairs are: (5, 11), (6, 10) and (8, 8)

solution:-

class Solution
{
public:
    void inorder(Node *root,unordered_map<int,int> &mp)
    {
        if(root!=NULL)
        {
            inorder(root->left,mp);
            mp[root->data]++;
            inorder(root->right,mp);
        }
    }
    int countPairs(Node* root1, Node* root2, int x)
    {
        unordered_map<int,int> mp1;
        inorder(root1,mp1);
        unordered_map<int,int> mp2;
        inorder(root2,mp2);
        int ans=0;
        for(auto it:mp1)
        {
            int s=x-it.first;
            if(mp2.find(s)!=mp2.end())
            {
                ans+=it.second*mp2[s];
            }
        }
        return ans;
    }
};
