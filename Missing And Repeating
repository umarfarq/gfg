Missing And Repeating

Given an unsorted array arr of of positive integers. One number 'A' from set {1, 2,....,n} is missing and one number 'B' occurs twice in array. Find numbers A and B.

Examples

Input: arr[] = [2, 2]
Output: 2 1
Explanation: Repeating number is 2 and smallest positive missing number is 1.

Input: arr[] = [1, 3, 3] 
Output: 3 2
Explanation: Repeating number is 3 and smallest positive missing number is 2.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
2 ≤ n ≤ 105
1 ≤ arr[i] ≤ n

Solution in java :


import java.io.*;
import java.util.*;

class GFG {
    // Driver code
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            int n = Integer.parseInt(br.readLine().trim());
            String[] str = br.readLine().split(" ");

            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(str[i]);
            }

            int[] ans = new Solve().findTwoElement(a);
            System.out.println(ans[0] + " " + ans[1]);
        }
    }
}
// User function Template for Java
class Solve {
    int[] findTwoElement(int arr[]) 
    {
        int n=arr.length;
        int missing=-1,repeating=-1;
        HashSet<Integer>set=new HashSet<>();
        for(int i=0;i<n;i++)
        {
            if(set.contains(arr[i]))
            {
                repeating=arr[i];
            }
            else
            {
                set.add(arr[i]);
            }
        }
        for(int i=1;i<=n;i++)
        {
            if(!set.contains(i))
            {
                missing=i;
                break;
            }
        }
        int ans[]={repeating,missing};
        return ans;
    }
}

